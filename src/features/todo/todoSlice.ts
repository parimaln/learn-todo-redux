import { GridSelectionModel } from '@material-ui/data-grid';
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { act } from '@testing-library/react';
import { RootState, AppThunk } from '../../app/store';
import { fetchTodo, TodoType } from './todoAPI';

export interface TodoState {
  todos: TodoType[];
  status: 'idle' | 'loading' | 'failed';
}

const initialState: TodoState = {
  todos: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'todo/fetchTodo',
  async () => {
    const response = await fetchTodo();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const todoSlice = createSlice({
  name: 'todo',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state, action: PayloadAction<string>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.todos.unshift({
        title: action.payload,
        completed: false,
        id: Date.now(),
        userId: 11
      })
    },
    decrement: (state, action: PayloadAction<GridSelectionModel | undefined>) => {
      state.todos.forEach((todo, i) => {
        if (action.payload?.find(item => item === todo.id)) {
          state.todos.splice(i, 1); 
        }
      });
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.todos = action.payload;
      });
  },
});

export const { increment, decrement } = todoSlice.actions;

export const selectCount = (state: RootState) => state.app.todos.filter(todo => !todo.completed).length;
export const selectTodos = (state: RootState) => state.app.todos.filter(todo => !todo.completed);
export const selectLoading = (state: RootState) => state.app.status;
export default todoSlice.reducer;
