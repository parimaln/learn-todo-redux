{"version":3,"sources":["app/hooks.ts","features/todo/todoAPI.ts","features/todo/todoSlice.ts","features/todo/coloumns.ts","features/todo/Todo.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppSelector","useSelector","fetchTodo","a","fetch","response","json","incrementAsync","createAsyncThunk","todoSlice","createSlice","name","initialState","todos","status","reducers","increment","state","action","unshift","title","payload","completed","id","Date","now","userId","decrement","forEach","todo","i","find","item","splice","extraReducers","builder","addCase","pending","fulfilled","actions","selectTodos","app","filter","selectLoading","columns","field","headerName","width","editable","useStyles","makeStyles","theme","backdrop","zIndex","drawer","color","Todo","classes","dispatch","useDispatch","useState","todoText","setTodoText","React","open","setOpen","selection","setSelection","handleClose","useEffect","style","height","margin","Button","startIcon","Add","disableElevation","onClick","variant","Delete","marginLeft","disabled","length","onSelectionModelChange","selectionModel","rows","pageSize","checkboxSelection","disableSelectionOnClick","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","onChange","event","target","value","autoFocus","label","type","fullWidth","DialogActions","Backdrop","className","CircularProgress","App","store","configureStore","reducer","todoReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b63c8bc5.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export type TodoType = {\n  userId: number;\n  id: number;\n  title: string;\n  completed: boolean;\n}\nexport async function fetchTodo() {\n  const response = await fetch('https://jsonplaceholder.typicode.com/todos')\n  return (await response.json()) as TodoType[];\n}\n","import { GridSelectionModel } from '@material-ui/data-grid';\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { act } from '@testing-library/react';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchTodo, TodoType } from './todoAPI';\n\nexport interface TodoState {\n  todos: TodoType[];\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: TodoState = {\n  todos: [],\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'todo/fetchTodo',\n  async () => {\n    const response = await fetchTodo();\n    // The value we return becomes the `fulfilled` action payload\n    return response;\n  }\n);\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state, action: PayloadAction<string>) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.todos.unshift({\n        title: action.payload,\n        completed: false,\n        id: Date.now(),\n        userId: 11\n      })\n    },\n    decrement: (state, action: PayloadAction<GridSelectionModel | undefined>) => {\n      state.todos.forEach((todo, i) => {\n        if (action.payload?.find(item => item === todo.id)) {\n          state.todos.splice(i, 1); \n        }\n      });\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.todos = action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement } = todoSlice.actions;\n\nexport const selectCount = (state: RootState) => state.app.todos.filter(todo => !todo.completed).length;\nexport const selectTodos = (state: RootState) => state.app.todos.filter(todo => !todo.completed);\nexport const selectLoading = (state: RootState) => state.app.status;\nexport default todoSlice.reducer;\n","export const columns = [\n    { field: 'id', headerName: 'ID', width: 150 },\n    {\n      width: 500,\n      field: 'title',\n      headerName: 'Title',\n      editable: true,\n    },\n  ];","import React, { useState } from 'react';\nimport { DataGrid, GridSelectionModel } from '@material-ui/data-grid';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n  decrement,\n  increment,\n  incrementAsync,\n  selectLoading,\n  selectTodos\n} from './todoSlice';\nimport { columns } from './coloumns';\nimport { Backdrop, Button, CircularProgress, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, makeStyles, TextField } from '@material-ui/core';\nimport { Add, Delete } from '@material-ui/icons';\nconst useStyles = makeStyles((theme) => ({\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n  },\n}));\nexport function Todo() {\n  const classes = useStyles();\n  const status = useAppSelector(selectLoading);\n  const todos = useAppSelector(selectTodos)\n  const dispatch = useAppDispatch();\n  const [todoText, setTodoText] = useState('');\n  const [open, setOpen] = React.useState(false);\n  const [selection, setSelection] = useState<GridSelectionModel>();\n  React.useEffect(() => {\n    dispatch(incrementAsync())\n  }, [])\n\n  function onSelectionModelChange(selectionModel: GridSelectionModel) {\n    setSelection(selectionModel);\n  }\n  function completeTask() {\n    dispatch(decrement(selection))\n  }\n  function addTask() {\n    dispatch(increment(todoText))\n    setOpen(false);\n    setTodoText('')\n  }\n  function handleOpen() {\n    setOpen(true);\n  }\n  function handleClose() {\n    setOpen(false);\n  }\n  const handleChange = (event: any) => {\n    setTodoText(event.target.value);\n  };\n  return (\n    <div>\n      <div style={{ height: 500, width: '100%' }}>\n        <div style={{ margin: '20px' }}>\n          <Button\n            startIcon={<Add />}\n            disableElevation\n            onClick={handleOpen}\n            variant=\"contained\"\n            color=\"primary\">\n            Add todo\n          </Button>\n          <Button\n            startIcon={<Delete />}\n            style={{ marginLeft: '20px' }}\n            disableElevation\n            onClick={completeTask}\n            disabled={!selection || selection.length === 0}\n            variant=\"contained\"\n            color=\"secondary\">\n            {selection && selection.length > 1 ? `Complete ${selection.length} Todos` : 'Complete Todo'}\n          </Button>\n        </div>\n        <DataGrid\n          onSelectionModelChange={onSelectionModelChange}\n          rows={todos}\n          columns={columns}\n          pageSize={10}\n          checkboxSelection\n          disableSelectionOnClick\n        />\n      </div>\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Add Todo</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Enter your life goal\n          </DialogContentText>\n          <TextField\n            onChange={handleChange}\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Todo\"\n            type=\"text\"\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={addTask} color=\"primary\">\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Backdrop className={classes.backdrop} open={status === 'loading'}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Todo } from './features/todo/Todo';\n\nfunction App() {\n  return (\n    <div >\n      <header>\n        <Todo />\n        <p>\n          Use buttons to add or delete Todos\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport todoReducer from '../features/todo/todoSlice';\n\nexport const store = configureStore({\n  reducer: {\n    app : todoReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}